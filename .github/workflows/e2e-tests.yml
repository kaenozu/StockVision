name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - critical
          - performance
          - cross-browser
          - mobile

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-e2e: ${{ steps.changes.outputs.should-run }}
      test-suite: ${{ steps.suite.outputs.suite }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'src/**'
            e2e:
              - 'frontend/tests/e2e/**'
            config:
              - 'frontend/playwright.config.ts'
              - 'frontend/package.json'
              - '.github/workflows/e2e-tests.yml'

      - name: Determine test suite
        id: suite
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "suite=all" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changes.outputs.e2e }}" = "true" ] || [ "${{ steps.changes.outputs.config }}" = "true" ]; then
            echo "suite=all" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changes.outputs.frontend }}" = "true" ] || [ "${{ steps.changes.outputs.backend }}" = "true" ]; then
            echo "suite=critical" >> $GITHUB_OUTPUT
          else
            echo "suite=smoke" >> $GITHUB_OUTPUT
          fi

      - name: Set should run
        id: should-run
        run: |
          if [ "${{ steps.changes.outputs.frontend }}" = "true" ] || 
             [ "${{ steps.changes.outputs.backend }}" = "true" ] || 
             [ "${{ steps.changes.outputs.e2e }}" = "true" ] || 
             [ "${{ steps.changes.outputs.config }}" = "true" ] || 
             [ "${{ github.event_name }}" = "schedule" ] ||
             [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  # Setup and build
  setup:
    name: Setup Application
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-e2e == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        run: pip install -r requirements.txt

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

  # Smoke tests - fast and essential
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup]
    if: needs.pre-flight.outputs.should-run-e2e == 'true'
    strategy:
      matrix:
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run smoke tests
        working-directory: ./frontend
        run: npm run test:e2e:smoke
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 7

  # Critical tests - important user flows
  critical-tests:
    name: Critical Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup, smoke-tests]
    if: needs.pre-flight.outputs.should-run-e2e == 'true' && (needs.pre-flight.outputs.test-suite == 'critical' || needs.pre-flight.outputs.test-suite == 'all')
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run critical tests
        working-directory: ./frontend
        run: npm run test:e2e:critical
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 3

      - name: Upload critical test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: critical-test-results-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 14

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup, smoke-tests]
    if: needs.pre-flight.outputs.should-run-e2e == 'true' && (needs.pre-flight.outputs.test-suite == 'performance' || needs.pre-flight.outputs.test-suite == 'all')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install chromium --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run performance tests
        working-directory: ./frontend
        run: npm run test:e2e:performance
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: frontend/test-results/
          retention-days: 30

  # Cross-browser tests
  cross-browser-tests:
    name: Cross-browser Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup, critical-tests]
    if: needs.pre-flight.outputs.should-run-e2e == 'true' && (needs.pre-flight.outputs.test-suite == 'cross-browser' || needs.pre-flight.outputs.test-suite == 'all')
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run cross-browser tests
        working-directory: ./frontend
        run: npm run test:e2e:compatibility
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload cross-browser test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cross-browser-test-results-${{ matrix.browser }}
          path: frontend/test-results/
          retention-days: 14

  # Mobile tests
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup, critical-tests]
    if: needs.pre-flight.outputs.should-run-e2e == 'true' && (needs.pre-flight.outputs.test-suite == 'mobile' || needs.pre-flight.outputs.test-suite == 'all')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install chromium --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run mobile tests
        working-directory: ./frontend
        run: npm run test:e2e:mobile
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mobile-test-results
          path: frontend/test-results/
          retention-days: 14

  # Comprehensive tests (scheduled or manual)
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    needs: [pre-flight, setup, smoke-tests]
    if: needs.pre-flight.outputs.should-run-e2e == 'true' && needs.pre-flight.outputs.test-suite == 'all' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - comprehensive/navigation.spec.ts
          - comprehensive/user-flows.spec.ts
          - comprehensive/api-integration.spec.ts
          - comprehensive/performance.spec.ts
          - comprehensive/edge-cases.spec.ts
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            frontend/dist
            frontend/node_modules
            ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json', 'requirements.txt') }}

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Start backend server
        run: |
          pip install -r requirements.txt
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8080 &
          sleep 10

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:8080/api/health --timeout 60000

      - name: Run comprehensive tests
        working-directory: ./frontend
        run: npx playwright test tests/e2e/${{ matrix.test-group }} --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1

      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: comprehensive-test-results-${{ matrix.browser }}-${{ hashFiles(matrix.test-group) }}
          path: frontend/test-results/
          retention-days: 30

  # Report aggregation and analysis
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, critical-tests, performance-tests, cross-browser-tests, mobile-tests]
    if: always() && needs.pre-flight.outputs.should-run-e2e == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Install reporting dependencies
        run: npm install -g @playwright/test

      - name: Merge test reports
        run: |
          mkdir -p merged-results
          find test-artifacts -name "*.json" -exec cp {} merged-results/ \;
          ls -la merged-results/

      - name: Generate combined report
        run: |
          echo "# E2E Test Results" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Run Summary" >> test-summary.md
          echo "- **Trigger**: ${{ github.event_name }}" >> test-summary.md
          echo "- **Test Suite**: ${{ needs.pre-flight.outputs.test-suite }}" >> test-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
          echo "- **Run Date**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> test-summary.md
          echo "" >> test-summary.md

          if [ -d "test-artifacts" ]; then
            echo "## Artifacts Generated" >> test-summary.md
            find test-artifacts -type f -name "*.html" -o -name "*.json" | while read file; do
              echo "- $(basename "$file")" >> test-summary.md
            done
          fi

      - name: Upload merged test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-summary
          path: |
            test-summary.md
            merged-results/
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧪 E2E Test Results\n\n${summary}\n\n[View detailed results in the workflow run](${context.payload.pull_request.html_url}/checks)`
              });
            }

  # Notify on failures
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests, critical-tests, performance-tests, cross-browser-tests, mobile-tests]
    if: failure() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"🚨 E2E tests failed on main branch\n- Commit: ${{ github.sha }}\n- Workflow: ${{ github.workflow }}\n- [View Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
          ${{ env.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue on repeated failures
        uses: actions/github-script@v6
        if: github.run_attempt > 1
        with:
          script: |
            const title = `E2E Test Failures on Main Branch`;
            const body = `
            ## E2E Test Failures

            **Branch**: ${context.ref}
            **Commit**: ${context.sha}
            **Workflow Run**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

            Multiple E2E test failures detected on the main branch. Please investigate and resolve.

            ### Next Steps
            - [ ] Review test failure logs
            - [ ] Identify root cause
            - [ ] Fix failing tests or application code
            - [ ] Verify fix with local testing
            - [ ] Close this issue when resolved

            cc: @development-team
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['bug', 'e2e-tests', 'priority-high']
            });